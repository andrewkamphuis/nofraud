AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications in AWS Fargate.
  This stack runs containers in a public VPC subnet, with no load balancer as this task pulls from SQS.

Parameters:
  NodeEnv:
    Description: Node Environment
    Type: String
    Default: production
  CommandToRun:
    Type: String
    Default: 'start:sqs'
    Description: Command to run on container start
  ContainerPort:
    Type: Number
    Default: 3000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 4096
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run consistently
  ScaleMinCapacity:
    Type: Number
    Default: 2
    Description: Minimum autoscale down
  ScaleMaxCapacity:
    Type: Number
    Default: 4
    Description: Maximum autoscale up
  ForceDeployDate: # Update this date ***IN THE BUILDSPEC-INFRASTRUCTURE.YML*** if an existing secret is changed to force a deploy.
    Type: String
    Default: '2024-08-14'

Resources:
  # A security group for the containers we will run in Fargate.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !ImportValue 'app-shared-infrastructure:VPCId'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'

  # This is a role which is used by the ECS tasks execution to access logs and ecr.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

  # This is a role which is used by the ECS tasks themselves to access other AWS services.
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks full access to services
                  - 's3:*'
                  - 'sqs:*'
                  - 'sns:*'
                  - 'dynamodb:*'
                  - 'lambda:*'
                  - 'secretsmanager:*'
                Resource: '*'

  # This is a role to allow auto scaling to scale the ECS service
  EcsServiceScalingTargetRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service: application-autoscaling.amazonaws.com
      Policies:
        - PolicyName: Scaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - ecs:*
                  - cloudwatch:*
                Resource: '*'

  # Log to CloudWatch
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 365

  #SQS Queue
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-queue.fifo'
      VisibilityTimeout: 900
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - 'SQSDeadLetterQueue'
            - 'Arn'
        maxReceiveCount: 3
  SQSDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-deadletter-queue.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'AWS::StackName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      TaskRoleArn: !Ref 'ECSTaskRole'
      ContainerDefinitions:
        - Name: !Ref 'AWS::StackName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !ImportValue 'noFraud-ecr:RepositoryUri'
          Command:
            - 'npm'
            - 'run'
            - !Ref 'CommandToRun'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
          Environment:
            - Name: NODE_ENV
              Value: !Ref NodeEnv
            - Name: FORCE_DEPLOY_DATE
              Value: !Ref ForceDeployDate
            - Name: DB_WRITER_HOST
              Value: !ImportValue 'app-shared-infrastructure:DBWriterHost'
            - Name: DB_READER_HOST
              Value: !ImportValue 'app-shared-infrastructure:DBWriterHost'
            - Name: DB_NAME
              Value:
                'Fn::Join':
                  - '-'
                  - - !Select
                      - '0'
                      - !Split
                        - '-'
                        - !Ref 'AWS::StackName'
            - Name: DB_USERNAME
              Value: !Sub '{{resolve:secretsmanager:/database:SecretString:db_username}}'
            - Name: DB_PASSWORD
              Value: !Sub '{{resolve:secretsmanager:/database:SecretString:db_password}}'
            - Name: SQS_FIFO_URL
              Value: !Ref SQSQueue
            - Name: C7_API_URL
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_api_url}}'
            - Name: C7_APP_ID
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_app_id}}'
            - Name: C7_APP_SECRET
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_app_secret}}'
            - Name: SQS_IS_ENABLED
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:sqs_is_enabled}}'
            - Name: SENDGRID_API_KEY
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:sendgrid_api_key}}'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'AWS::StackName'
      Cluster: !ImportValue 'app-shared-infrastructure:ClusterName'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'FargateContainerSecurityGroup'
          Subnets:
            - !ImportValue 'app-shared-infrastructure:PrivateSubnetOne'
            - !ImportValue 'app-shared-infrastructure:PrivateSubnetTwo'
      TaskDefinition: !Ref 'TaskDefinition'

  #Container Autoscaling
  EcsServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MinCapacity: !Ref 'ScaleMinCapacity'
      MaxCapacity: !Ref 'ScaleMaxCapacity'
      ResourceId: !Sub
        - service/${EcsClusterName}/${ServiceName}
        - EcsClusterName: !ImportValue 'app-shared-infrastructure:ClusterName'
          ServiceName: !Ref AWS::StackName
      RoleARN: !GetAtt EcsServiceScalingTargetRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsServiceRequestCountPerTargetPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceRequestCountPerTargetPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 2
        ScaleInCooldown: 240 #Scale in slower if cpu goes down.
        ScaleOutCooldown: 60 #Scale out quickly, every minute if cpu goes up.
  RdsSecurityGroupIngressFromEcs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from fargate containers
      GroupId: !ImportValue 'app-shared-infrastructure:RdsSecurityGroup'
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
