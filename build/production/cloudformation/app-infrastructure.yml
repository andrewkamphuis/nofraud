AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications in AWS Fargate.
  This stack runs containers in a private VPC subnet, and includes a
  public facing load balancer to register the services in.

Parameters:
  NodeEnv:
    Description: Node Environment
    Type: String
    Default: production
  CommandToRun:
    Type: String
    Default: 'start:production'
    Description: Command to run on container start
  ContainerPort:
    Type: Number
    Default: 3000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 4096
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: '*'
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run consistently
  ScaleMinCapacity:
    Type: Number
    Default: 2
    Description: Minimum autoscale down
  ScaleMaxCapacity:
    Type: Number
    Default: 4
    Description: Maximum autoscale up
  CertificateArn:
    Type: String
    Default: ''
    Description: us-west-2 wildcard acm ssl certificate for API on ALB
  CertificateDomainName:
    Description: Domain name to use for all APPs using a wildcard.
    Type: String
  HostedZoneId:
    Description: Route53 Domain Hosted ZoneId
    Type: String
  ForceDeployDate: # Update this date ***IN THE BUILDSPEC-INFRASTRUCTURE.YML*** if an existing secret is changed to force a deploy.
    Type: String
    Default: '2024-08-14'

Resources:
  # A security group for the containers that will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !ImportValue 'app-shared-infrastructure:VPCId'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !ImportValue 'app-shared-infrastructure:VPCId'
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !ImportValue 'app-shared-infrastructure:S3Bucket'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !ImportValue 'app-shared-infrastructure:PublicSubnetOne'
        - !ImportValue 'app-shared-infrastructure:PublicSubnetTwo'
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue 'app-shared-infrastructure:VPCId'
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      Certificates:
        - CertificateArn: !ImportValue 'app-shared-infrastructure:CertificateDomainName'
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: HTTPS

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # This is a role which is used by the ECS tasks execution to access logs and ecr.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

  # This is a role which is used by the ECS tasks themselves to access other AWS services.
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks full access to services
                  # This can be secured more with least permissions by defining specific resources.
                  - 's3:*'
                  - 'sqs:*'
                  - 'sns:*'
                  - 'dynamodb:*'
                  - 'lambda:*'
                  - 'secretsmanager:*'
                Resource: '*'

  # This is a role to allow auto scaling to scale the ECS service
  EcsServiceScalingTargetRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service: application-autoscaling.amazonaws.com
      Policies:
        - PolicyName: Scaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - ecs:*
                  - cloudwatch:*
                Resource: '*'

  # Log to CloudWatch
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 365

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'AWS::StackName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      TaskRoleArn: !Ref 'ECSTaskRole'
      ContainerDefinitions:
        - Name: !Ref 'AWS::StackName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !ImportValue
            'Fn::Join':
              - '-'
              - - !Select
                  - '0'
                  - !Split
                    - '-'
                    - !Ref 'AWS::StackName'
                - 'ecr:RepositoryUri'
          Command:
            - 'npm'
            - 'run'
            - !Ref 'CommandToRun'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
          Environment:
            - Name: NODE_ENV
              Value: !Ref NodeEnv
            - Name: FORCE_DEPLOY_DATE
              Value: !Ref ForceDeployDate
            - Name: DB_WRITER_HOST
              Value: !ImportValue 'app-shared-infrastructure:DBWriterHost'
            - Name: DB_READER_HOST
              Value: !ImportValue 'app-shared-infrastructure:DBWriterHost'
            - Name: DB_NAME
              Value:
                'Fn::Join':
                  - '-'
                  - - !Select
                      - '0'
                      - !Split
                        - '-'
                        - !Ref 'AWS::StackName'
            - Name: DB_USERNAME
              Value: !Sub '{{resolve:secretsmanager:/database:SecretString:db_username}}'
            - Name: DB_PASSWORD
              Value: !Sub '{{resolve:secretsmanager:/database:SecretString:db_password}}'
            - Name: SQS_FIFO_URL
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:sqs_fifo_url}}'
            - Name: C7_API_URL
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_api_url}}'
            - Name: C7_APP_ID
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_app_id}}'
            - Name: C7_APP_SECRET
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:c7_app_secret}}'
            - Name: SQS_IS_ENABLED
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:sqs_is_enabled}}'
            - Name: SENDGRID_API_KEY
              Value: !Sub '{{resolve:secretsmanager:/noFraud/env:SecretString:sendgrid_api_key}}'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'AWS::StackName'
      Cluster: !ImportValue 'app-shared-infrastructure:ClusterName'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'FargateContainerSecurityGroup'
          Subnets:
            - !ImportValue 'app-shared-infrastructure:PrivateSubnetOne'
            - !ImportValue 'app-shared-infrastructure:PrivateSubnetTwo'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'AWS::StackName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      TargetType: ip
      Name: !Ref 'AWS::StackName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: !ImportValue 'app-shared-infrastructure:VPCId'

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref 'PublicLoadBalancerListener'
      Priority: !Ref 'Priority'

  #Container Autoscaling
  EcsServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MinCapacity: !Ref 'ScaleMinCapacity'
      MaxCapacity: !Ref 'ScaleMaxCapacity'
      ResourceId: !Sub
        - service/${EcsClusterName}/${ServiceName}
        - EcsClusterName: !ImportValue 'app-shared-infrastructure:ClusterName'
          ServiceName: !Ref AWS::StackName
      RoleARN: !GetAtt EcsServiceScalingTargetRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsServiceRequestCountPerTargetPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceRequestCountPerTargetPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel:
            Fn::Join:
              - ''
              - - Fn::Select:
                    - 1
                    - Fn::Split:
                        - /
                        - Ref: PublicLoadBalancerListener
                - /
                - Fn::Select:
                    - 2
                    - Fn::Split:
                        - /
                        - Ref: PublicLoadBalancerListener
                - /
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - /
                        - Ref: PublicLoadBalancerListener
                - /
                - Fn::GetAtt:
                    - TargetGroup
                    - TargetGroupFullName
        ScaleInCooldown: 900 #Scale in slowly ever 15 minutes.
        ScaleOutCooldown: 60 #Scale out quickly, every minute if request count continues to go up.
        TargetValue: 100 #Maintain 100 requests per minute per container
        #Containers running single threaded node could handle 600 requests per minute with an average request time of 100ms
        #An average payment gateway request can take 3000ms so a container could only handle 20 payment requests per minute
        #Setting the target value to 100 to ensure we have enough servers for all request types.
  RdsSecurityGroupIngressFromEcs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from fargate containers
      GroupId: !ImportValue 'app-shared-infrastructure:RdsSecurityGroup'
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  AppDnsEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name: !Join ['.', [!Ref 'AWS::StackName', !Ref 'CertificateDomainName']]
      Type: A
