import AjvCore, { CurrentOptions } from "ajv/dist/core";
import type { AnySchemaObject, JTDParser, SchemaObject } from "ajv/dist/types";
import type { JTDDataType, JTDSchemaType, SomeJTDSchemaType } from "ajv/dist/types/jtd-schema";
type JTDOptions = CurrentOptions & {
    strict?: never;
    allowMatchingProperties?: never;
    allowUnionTypes?: never;
    validateFormats?: never;
    $data?: never;
    verbose?: boolean;
    $comment?: never;
    formats?: never;
    loadSchema?: never;
    useDefaults?: never;
    coerceTypes?: never;
    next?: never;
    unevaluated?: never;
    dynamicRef?: never;
    meta?: boolean;
    defaultMeta?: never;
    inlineRefs?: boolean;
    loopRequired?: never;
    multipleOfPrecision?: never;
};
export declare class Ajv extends AjvCore {
    constructor(opts?: JTDOptions);
    _addVocabularies(): void;
    _addDefaultMetaSchema(): void;
    defaultMeta(): string | AnySchemaObject | undefined;
    compileSerializer<T = unknown>(schema: SchemaObject): (data: T) => string;
    compileSerializer<T = unknown>(schema: JTDSchemaType<T>): (data: T) => string;
    compileParser<T = unknown>(schema: SchemaObject): JTDParser<T>;
    compileParser<T = unknown>(schema: JTDSchemaType<T>): JTDParser<T>;
    private _compileSerializer;
    private _compileParser;
}
export default Ajv;
export { SchemaCxt, SchemaObjCxt } from "ajv/dist/compile";
export { _, Code, CodeGen, CodeGenOptions, Name, nil, str, stringify } from "ajv/dist/compile/codegen";
export { default as MissingRefError } from "ajv/dist/compile/ref_error";
export { KeywordCxt } from "ajv/dist/compile/validate";
export { CodeOptions, ErrorsTextOptions, InstanceOptions, Logger, Options, Plugin } from "ajv/dist/core";
export { default as ValidationError } from "ajv/dist/runtime/validation_error";
export { AnySchema, AnySchemaObject, AsyncFormatDefinition, AsyncSchema, AsyncValidateFunction, CodeKeywordDefinition, ErrorNoParams, ErrorObject, Format, FormatDefinition, FuncKeywordDefinition, JTDParser, KeywordDefinition, KeywordErrorDefinition, MacroKeywordDefinition, Schema, SchemaObject, ValidateFunction, Vocabulary } from "ajv/dist/types";
export { JTDErrorObject } from "ajv/dist/vocabularies/jtd";
export { JTDDataType, JTDOptions, JTDSchemaType, SomeJTDSchemaType };

