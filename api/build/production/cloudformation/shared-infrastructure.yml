AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying a VPC and Aurora Serverless Database.
  This stack creates a VPC with public and private subnets, Internet and NAT
  Gateways to permit outbound internet and includes an aurora serverless DB cluster.

Parameters:
  VpcSubnet:
    Type: String
    Default: ''
    Description: Subnet for Application
  MinDbCapacity:
    Description: Aurora Serverless ACU Minimum Capacity
    Type: String
    Default: 1 #Start with 1 and move to 4 for select DBs if needed. Max connections = 90 for 1 ACU and 135 for 4 ACU
  MaxDbCapacity:
    Description: Aurora Serverless ACU Maximum Capacity
    Type: String
    Default: 4
  DbAdminUsername:
    Description: Aurora Serverless Admin DB Password
    Type: String
    NoEcho: true
  DbAdminPassword:
    Description: Aurora Serverless Admin DB Password
    Type: String
    NoEcho: true
  CertificateDomainName:
    Description: Domain name to use for all APPs using a wildcard.
    Type: String
  HostedZoneId:
    Description: Route53 Domain Hosted ZoneId
    Type: String
  EC2InstanceType:
    Type: String
    Default: t2.micro
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # The subnets are distributed across the first two availability zones
  # in the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref 'VpcSubnet'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Two public subnets, where containers can have public IP addresses
  # Two private subnets to run containers
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [0, !Cidr [!Ref 'VpcSubnet', 4, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [1, !Cidr [!Ref 'VpcSubnet', 4, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [2, !Cidr [!Ref 'VpcSubnet', 4, 13]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'PrivateSubnet1'
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [3, !Cidr [!Ref 'VpcSubnet', 4, 13]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'PrivateSubnet2'

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: 'Public'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Nat Gateway for egress ipv4 internet access for private subnets
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: 'Nat1'
  EIP1:
    DependsOn: GatewayAttachement
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: 'NAT1'
  Nat1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: 'Private1'
  Nat1InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref Nat1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1
  Nat1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref Nat1RouteTable

  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: 'Nat2'
  EIP2:
    DependsOn: GatewayAttachement
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: 'NAT2'
  Nat2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: 'Private2'
  Nat2InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref Nat2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2
  Nat2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref Nat2RouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # Aurora Serverless Database
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet Groups for DB'
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: 'auroraAdmin'
      MasterUserPassword: !Ref DbAdminPassword
      DBClusterIdentifier: 'mysql8-app-cluster'
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.03.0
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DeletionProtection: true
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref 'RdsSecurityGroup'
      BackupRetentionPeriod: 35
      ServerlessV2ScalingConfiguration:
        MaxCapacity: !Ref 'MaxDbCapacity'
        MinCapacity: !Ref 'MinDbCapacity'
  RDSDBClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: 'CloudFormation Aurora Cluster Parameter Group'
      Family: aurora-mysql8.0
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_filesystem: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        collation_connection: utf8mb4_general_ci
        collation_server: utf8mb4_general_ci

  RDSDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      DBClusterIdentifier:
        Ref: RDSCluster
      DBInstanceClass: db.serverless
      DBInstanceIdentifier: 'mysql8-app-instance-1'
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: false
      EnablePerformanceInsights: false

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Access to the Aurora Serverless Database'
      VpcId: !Ref 'VPC'

  DatabaseSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/database'
      SecretString: !Sub '{
        "db_username" : "${DbAdminUsername}",
        "db_password" : "${DbAdminPassword}"
        }'

  WildcardCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Join ['.', ['*', !Ref 'CertificateDomainName']]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join ['.', ['*', !Ref 'CertificateDomainName']]
          HostedZoneId: !Ref HostedZoneId

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-production-alb-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # This policy needs to include the principal AWS ALB root account ID: 797873946194
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - {
              Effect: Allow,
              Principal: { AWS: !Sub 'arn:aws:iam::797873946194:root' },
              Action: s3:PutObject,
              Resource: !Sub '${S3Bucket.Arn}/*'
            }

  BastionKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: 'bastion-keypair'
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref BastionKeyPair
      SubnetId: !Ref PublicSubnetOne
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion'
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-bastion-sg'
      GroupDescription: !Sub 'Security group for ${AWS::StackName} bastion host'
      VpcId: !Ref VPC
  BastionAllowInboundSSHFromInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  RdsSecurityGroupIngressFromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from bastion host
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'BastionSecurityGroup'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'VPCId']]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'PublicSubnetOne']]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'PublicSubnetTwo']]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'PrivateSubnetOne']]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'PrivateSubnetTwo']]
  Nat1EIP:
    Description: Elastic IP Address for Nat1
    Value: !Ref 'EIP1'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'NAT1EIP']]
  Nat2EIP:
    Description: Elastic IP Address for Nat2
    Value: !Ref 'EIP2'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'NAT2EIP']]
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'ClusterName']]
  DBWriterHost:
    Description: The DBWriterHost URL
    Value: !GetAtt RDSCluster.Endpoint.Address
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'DBWriterHost']]
  RdsSecurityGroup:
    Description: The Database Security Group
    Value: !GetAtt RdsSecurityGroup.GroupId
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'RdsSecurityGroup']]
  CertificateDomainName:
    Description: The Wildcard Certificate ID that used for all APPs
    Value: !Ref WildcardCertificate
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'CertificateDomainName']]
  S3Bucket:
    Description: The S3 Bucket for ALB Logs
    Value: !Ref S3Bucket
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'S3Bucket']]
